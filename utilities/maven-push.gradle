/*
 * Copyright 2017 Treebo Hotels
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    maven {
        url "https://raw.github.com/synergian/wagon-git/releases"
    }
}

configurations {
    deployLibrary
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    deployLibrary "ar.com.synergian:wagon-git:0.2.3"
}

task androidJavadocs(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

task lookForArtifacts {
    doLast {
        def artifactName = ARTIFACT_NAME + '-' + ARTIFACT_VERSION + '.aar'
        def artifactPath = ARTIFACT_PACKAGE.replace(".", "/") + "/" + ARTIFACT_NAME + "/" + ARTIFACT_VERSION + "/" + artifactName
        def repositoryUrl = 'https://api.bitbucket.org/1.0/repositories/' + COMPANY + '/' + REPOSITORY_NAME + '/raw/releases/' + artifactPath

        println("")
        println("Checking if artifact already exists: " + artifactName)
        println("at URL: " + repositoryUrl)

        def artifactExists = urlExists(repositoryUrl)
        println(artifactExists ? "existing artifact found" : "no existing artifact found")
        println("")

        if (urlExists(repositoryUrl)) {
            throw new RuntimeException("Artifact with version " + ARTIFACT_VERSION + " already exist - not executing uploadArchives")
        }
        return true
    }
}

uploadArchives.dependsOn lookForArtifacts

    uploadArchives {
        configuration = configurations.archives
        repositories.mavenDeployer {

            configuration = configurations.deployLibrary
            repository(url: getReleaseRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            snapshotRepository(url: getSnapshotRepositoryUrl()){
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            uniqueVersion = true

            pom.project {
                groupId = ARTIFACT_PACKAGE
                version = ARTIFACT_VERSION
                artifactId = ARTIFACT_NAME
                packaging ARTIFACT_PACKAGING

                name ARTIFACT_NAME
                packaging ARTIFACT_PACKAGING
                description ARTIFACT_DESCRIPTION
                url ARTIFACT_URL
                scm {
                    url ARTIFACT_SCM_URL
                    connection ARTIFACT_SCM_CONNECTION
                    developerConnection ARTIFACT_SCM_DEV_CONNECTION
                }
                licenses {
                    license {
                        name ARTIFACT_LICENCE_NAME
                        url ARTIFACT_LICENCE_URL
                        distribution ARTIFACT_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id ARTIFACT_DEVELOPER_ID
                        name ARTIFACT_DEVELOPER_NAME
                        email ARTIFACT_DEVELOPER_EMAIL
                    }
                }
            }
        }

        signing {
            required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
            sign configurations.archives
        }
    }


/******************************************
* Initializing the methods with right values
******************************************/

def urlExists(String repositoryUrl) {

    try {
        def connection = (HttpURLConnection) new URL(repositoryUrl).openConnection()

        connection.setRequestProperty("Authorization", "Basic " + getBase64EncodedCredentials())
        connection.setConnectTimeout(10000)
        connection.setReadTimeout(10000)
        connection.setRequestMethod("GET")

        def responseCode = connection.getResponseCode()
        println("responseCode: " + responseCode)

        if (responseCode == 401) {
            throw new RuntimeException("Unauthorized BitBucket user - please provide valid username and password in gradle.properties file")
        }

        return (200 == responseCode)
    } catch (IOException ignored) {
        return false
    }
}

def getBase64EncodedCredentials() {
    def s = USERNAME + ":" + PASSWORD;
    return s.bytes.encodeBase64().toString()
}

def isReleaseBuild() {
    return ARTIFACT_VERSION.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : 'git:releases://' + DOMAIN_NAME + '@bitbucket.org/' + COMPANY + '/' + REPOSITORY_NAME + '.git'
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : 'git:snapshots://' + DOMAIN_NAME + '@bitbucket.org/' + COMPANY + '/' + REPOSITORY_NAME + '.git'
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : USERNAME
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : PASSWORD
}